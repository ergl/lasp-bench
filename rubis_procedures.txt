-- 2
register_user(region_name, nickname, first_name, last_name, email, password) {
    SELECT id AS region_id
      FROM regions
     WHERE name = region_name

    if region_id == null
        abort

    SELECT nickname
      FROM users
      WHERE nickname = nickname

    if nickname != null
        abort

    INSERT INTO users VALUES (fresh_id(), nickname, region_id, ...)
}

-- 4
browse_categories() {
    SELECT id, name
     FROM categories
}

-- 5
search_items_in_category(category_id, page, per_page) {
    SELECT items.name,
           items.id,
           items.closed,
           items.max_bid_amount,
           items.nb_of_bids,
           items.initial_price
      FROM items
     WHERE items.category = category_id
       AND items.closed = false
     LIMIT (page * per_page), per_page
}

-- 6
browse_regions() {
    SELECT id, name
      FROM regions
}

-- 7
browse_categories_in_region(region_name) {
  return browse_categories()
}

-- 8 (same as search_items_in_category, but such that the seller is in the region)
search_items_in_region(category_id, region_id, page, per_page) {
  SELECT items.name,
         items.id,
         items.closed,
         items.max_bid_amount,
         items.nb_of_bids,
         items.initial_price
    FROM items, users
   WHERE items.seller = users.id
     AND users.region = region_id
     AND items.category = category_id
     AND items.closed = false
   LIMIT (page * per_page), per_page
}

-- 9
view_item(item_id) {
  SELECT items.*, users.nickname
    FROM items, users
   WHERE items.id = item_id
     AND items.seller = users.id
}

-- 10
view_user_info(user_id) {
  SELECT * as user
  FROM users
  WHERE id = user_id

  SELECT comments.*, users.nickname
    FROM comments
  WHERE to_user = user_id
    AND comments.from_user_id = users.id
}

-- 11
view_bid_history(item_id) {
  SELECT name
    FROM items
   WHERE id = item_id

  SELECT bids.*, users.nickname
    FROM bids, users
   WHERE item_id = item_id
     AND bids.user_id = users.id
}

-- 13
buy_now(item_id, user_name, password) {
  SELECT users.id AS user_id, users.password AS user_password
    FROM users
   WHERE nickname = user_name

   if no_match(password, user_password)
      return

  SELECT items.*, users.nickname
    FROM items, users
   WHERE items.id = items_id
     AND items.seller_id = users.id
}

-- 14, assume user is already logged in
store_buy_now(item_id, user_id, qty) {
  SELECT quantity AS q
  FROM items where id = item_id

  if qty > q then
    return

  UPDATE items SET quantity = (q - qty)
  WHERE id = item_id
  INSERT INTO buy_now VALUES(user_id, item_id, qty, now)
}

-- 16 put_bid
put_bid(item_id, nickname, password) {
  SELECT users.id AS user_id, users.password AS user_password
    FROM users
   WHERE nickname = user_name

   if no_match(password, user_password)
      return

  SELECT items.name AS item_name,
         items.max_bid_amount AS bid,
         items.nb_of_bids,
         items.initial_price AS init_price
         users.nickname
   FROM items, users
   WHERE items.id = item_id
     AND items.seller_id = users.id

  maxBid = if bid == 0 then init_price
}

-- 17
store_bid(item_id, user_id, bid_amount, qty) {
  SELECT quantity AS q, reserve_price, closed
   FROM items
  WHERE id = item_id

  if closed then
    return

  if qty > quantity then
    return

  if bid_amount < reserve_price then
    return

  bid_id = INSERT INTO bids values (user_id, item_id, bid_amount)

  SELECT nb_bids, max_bid_amount
    FROM items
   WHERE id = item_id

  if max_bid_amount < bid_amount
    UPDATE items
      SET max_bid_id = bid_id,
          max_bid_amount = bid_amount
  end

  UPDATE items
     SET nb_of_bids = nb_bids + 1
   WHERE id = item_id
}

-- 19
put_comment(item_id, to_id, nickname, password) {
  SELECT users.id AS user_id, users.password AS user_password
    FROM users
   WHERE nickname = user_name

   if no_match(password, user_password)
      return

  SELECT nickname AS to_nickname
    FROM users
   WHERE id = to_id

  SELECT name
    FROM items
   WHERE id = item_id
}

-- 20
store_comment(item_id, to_id, from_id, rating, comment) {
  INSERT INTO comments VALUES (from_id, to_id, item_id, rating, comment)

  SELECT rating AS old_rating
    FROM users
   WHERE id = to_id

  UPDATE users
     SET rating = old_rating + rating
   WHERE id = to_id
}

-- 22
select_category_to_sell_item(nickname, password) {
  SELECT users.id AS user_id, users.password AS user_password
    FROM users
   WHERE nickname = user_name

   if no_match(password, user_password)
      return

  SELECT id, name
    FROM categories
}

-- 24
register_item(user_id, category_id, name, description, initial_price,
              reserve_price, buy_now, duration, quantity) {

  INSERT INTO items VALUES(fresh(), ...)
}

-- 26
about_me(nickname, password) {
  SELECT users.id AS user_id, users.password AS user_password
    FROM users
   WHERE nickname = user_name

   if no_match(password, user_password)
      return

  SELECT * AS user
    FROM users
   WHERE id = user_id

   -- bids for user
   SELECT item_id, bids.bid
   FROM bids, items
   WHERE bids.user_id = user_id
     AND bids.item_id = items.id

  -- selling items
  SELECT *
    FROM items
   WHERE items.seller = user_id

 -- won items
 SELECT items.name, users.nickname
   FROM winners, items, users
  WHERE winners.user_id = user_id
    AND winners.item_id = items.id
    AND items.seller_id = users.id

  -- items the user bought
  SELECT items.*, users.nickname
    FROM buy_now, items, users
   WHERE buy_now.buyer_id = user_id
     AND buy_now.item_id = items.id
     AND items.seller_id = users.id

   -- comments about the user
  SELECT comments.*, users.nickname
    FROM comments, users
   WHERE comments.to_user_id = user_id
     AND comments.from_user_id = users.id
}

-- 27
get_auctions_ready_for_close(region_id, category_id, max_items, max_bids) {
  SELECT items.*
    FROM items, users
    WHERE items.category_id = category_id
      AND items.closed = false
      AND items.nb_of_bids > max_bids
      AND items.user_id = users.id
      AND users.region_id = region_id
    LIMIT max_items
}

-- 28
close_auction(item_id) {
  SELECT item.closed,
         bid.* AS winner_bid
    FROM items, bids
   WHERE item.id = item_id
     AND item.max_bid_id = bid.id

 if item.closed == true then
    return

  if winner_bid == null then
    return

  INSERT INTO winners
       VALUES (winner_bid.user_id, item_id, winner_bid.bid)

  UPDATE items
     SET closed = true
   WHERE id = item_id
}
